var express = require('express');
var router  = express.Router();

// A logged in "database":
var online = {};

// ############# User Server-Side Routes ###########

// ## home
// The main user view which will contain notifications and links to other views.
router.get('/home', function(req, res) {
	var message = req.flash('auth') || 'Login Successful';
	// added session support
	var user = req.session.user;
	if (user === undefined || online[user.uid] === undefined) {
		req.flash('auth', 'Not logged in!');
		res.redirect('/user/login');
	}
	else {
		res.render('main', { title   : 'User Main',
			message : message,
			username : user.username,
			password : user.password });
	}
});

// ## logout
// Deletes user info & session - then redirects to login.
router.get('/logout', function(req, res) {
	var user = req.session.user;
	if (user === undefined || online[user.uid] === undefined) {
		req.flash('auth', 'Not logged in!');
		res.redirect('/user/login');
		return;
	}

	if (online[user.uid] !== undefined) {
		delete online[user.uid];
	}

	delete req.session.user;
	res.redirect('/user/login');
});

// ## edit
// Allows the user to edit the information in their profile, or delete their
// profile altogether.
router.get('/edit', function(req, res) {
	if (user === undefined || online[user.id] === undefined) {
		req.flash('auth', 'Not logged in!');
		res.redirect('/user/login');
		return;
	}
	else {
		res.render('edituser', { title	: 'Edit Profile',
			// stuff related to the ejs file
		}
	}
});

// ## match
// Renders the view containing all of the user's current matches generated by
// the matching algorithm.
router.get('/match', function(req, res) {
	if (user === undefined || online[user.id] === undefined) {
		req.flash('auth', 'Not logged in!');
		res.redirect('/user/login');
		return;
	}
	else {
		res.render('matcher', { title	: 'Matching',
			// stuff related to the ejs file
		}
	}
});

// ## chat
// Renders the chat view which allows the user to chat with users who they have
// matched with.
router.get('/chat', function(req, res) {
	if (user === undefined || online[user.id] === undefined) {
		req.flash('auth', 'Not logged in!');
		res.redirect('/user/login');
		return;
	}
	else {
		res.render('chat' { title	: 'Chat',
			// stuff related to the ejs file
		}
	}
});

// ## auth
// Performs **basic** user authentication. ##### might not need #####
// We need to change this to interact with a real database.
router.post('/auth', function(req, res) {
	// redirect if logged in:
	var user = req.session.user;

	// do the check as described in the `exports.login` function.
	if (user !== undefined && online[user.uid] !== undefined) {
		res.redirect('/user/main');
	}
	else {
		// Pull the values from the form.
		var username = req.body.username;
		var password = req.body.password;
		// Perform the user lookup.
		// This should actually be a db query.
		userlib.lookup(username, password, function(error, user) {
			if (error) {
				// If there is an error we "flash" a message to the
				// redirected route `/user/login`.
				req.flash('auth', error);
				res.redirect('/user/login');
			}
			else {
				req.session.user = user;
				// Store the user in our in memory database.
				online[user.uid] = user;
				// Redirect to main.
				res.redirect('/user/main');
			}
		});
	}
});


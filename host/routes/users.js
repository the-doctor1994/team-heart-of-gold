var express = require('express');
var router  = express.Router();

//**might not need**// //var userlib = require('../lib/user');

// A logged in "database":
//**might not need**// //var online = {};

// ############# User Server-Side Routes ###########

// ## home
// The main user view which will contain notifications and links to other views.
router.get('/home', function(req, res) {
	var message = req.flash('auth') || 'Login Successful';
	// added session support
	var user = req.session.user;
	if (user === undefined || online[user.uid] === undefined) {
		req.flash('auth', 'Not logged in!');
		res.redirect('/user/login');
	}
	else {
		res.render('main', { title   : 'User Main',
			message : message,
			username : user.username,
			password : user.password });
	}
});

// ## logout
// Deletes user info & session - then redirects to login.
router.get('/logout', function(req, res) {
	var user = req.session.user;
	if (user === undefined || online[user.uid] === undefined) {
		req.flash('auth', 'Not logged in!');
		res.redirect('/user/login');
		return;
	}

	if (online[user.uid] !== undefined) {
		delete online[user.uid];
	}

	delete req.session.user;
	res.redirect('/user/login');
});

// ## edit
// Allows the user to edit the information in their profile, or delete their
// profile altogether.
router.get('/edit', function(req, res) {

});

// ## match
// Renders the view containing all of the user's current matches generated by
// the matching algorithm.
router.get('/match', function(req, res) {

});

// ## chat
// Renders the chat view which allows the user to chat with users who they have
// matched with.
router.get('/chat', function(req, res) {

});

// ## login
// Provides a user login view. ##### might not need #####
/*router.get('/login', function(req, res){
	// Grab any messages being sent to use from redirect.
	var authmessage = req.flash('auth') || '';

	// TDR: redirect if logged in:
	var user  = req.session.user;

	// TDR: If the user is already logged in - we redirect to the
	// main application view. We must check both that the `userid`
	// and the `online[userid]` are undefined. The reason is that
	// the cookie may still be stored on the client even if the
	// server has been restarted.
	if (user !== undefined && online[user.uid] !== undefined) {
		res.redirect('/user/main');
	}
	else {
		// Render the login view if this is a new login.
		res.render('login', { title   : 'User Login',
			message : authmessage });
	}
});
*/

// ## auth
// Performs **basic** user authentication. ##### might not need #####
router.post('/auth', function(req, res) {
	// redirect if logged in:
	var user = req.session.user;

	// do the check as described in the `exports.login` function.
	if (user !== undefined && online[user.uid] !== undefined) {
		res.redirect('/user/main');
	}
	else {
		// Pull the values from the form.
		var username = req.body.username;
		var password = req.body.password;
		// Perform the user lookup.
		userlib.lookup(username, password, function(error, user) {
			if (error) {
				// If there is an error we "flash" a message to the
				// redirected route `/user/login`.
				req.flash('auth', error);
				res.redirect('/user/login');
			}
			else {
				req.session.user = user;
				// Store the user in our in memory database.
				online[user.uid] = user;
				// Redirect to main.
				res.redirect('/user/main');
			}
		});
	}
});


/*
router.get('/online', function(req, res) { //might not be needed
	res.render('online', { title : 'Users Online',
		users : online });
});
router.online = online;
module.exports = router;
*/



// idk if we actually need all of these yet I'm just following an example

/*
var userMemoryStore = new dojo.store.Memory();
var userJsonRestStore = new dojo.store.JsonRest({});
var userStore = new dojo.store.Cache(userJsonRestStore, userMemoryStore);
var userDataStore = new dojox.data.JsonRestStore({
	target: "something",
	idAttribute: "something"
});
var userStore = new dojo.store.Cache(userJsonRestStore, userMemoryStore);

//this require is not assigned to anything?
require([
		"dojo/router",
		"dojo/dom",
		"dojo/on",
		"dojo/request",
		"dojo/json",
		"dojo/domReady!",
		"dojo/query",
		"dojo/store/JsonRest",
		"dojo/store/Memory"],
		
		function(
			router,
			dom,
			on,
			request,
			json,
			domReady,
			query,
			JsonRest) {

			var store = new JsonRest({
				target: ""
			});

			
});
*/
